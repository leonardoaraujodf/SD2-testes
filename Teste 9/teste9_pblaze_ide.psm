; ===============================================================
; Teste 9 - Leonardo Amorim de Araújo - Matrícula: 15/0039921
; ===============================================================
; 
; ===============================================================
; square circuit with simple I/O interface
; ===============================================================
; program operation:
; - read switch to a (4 MSBs) and b (4 LSBs)
; - calculate a*a + b*b
; - display data on 8 leds

; ===============================================================
; data constant
; ===============================================================

UP_NIBBLE_MASK      EQU       15                  ; 00001111

; ===============================================================
; data ram address alias
; ===============================================================

a_lsb               EQU       0
b_lsb               EQU       2
aa_lsb              EQU       4
bb_lsb              EQU       5
aa_msb				EQU		  6
bb_msb              EQU       7
aabb_lsb            EQU       8
aabb_msb            EQU       9
aabb_cout           EQU       10

; ===============================================================
; register alias
; ===============================================================
; commonly used local variables

data                EQU       s0                  ; reg for temporary data
addr                EQU       s1                  ; reg for temporary mem & i/o port addr
i                   EQU       s2                  ; general-purpose loop index

; global variables

sw_in               EQU       sF

; ===============================================================
; port alias
; ===============================================================

; --------input port definitions------------

sw_port             DSIN       1                   ; 8-bit switches

; ---------output port definitions----------

led_port            DSOUT       1


; ===============================================================
; main program
; ===============================================================

; calling hierarchy;
; 
; main
; 	- clr_data_mem
; 	- read_switch
; 		- get_upper_nibble
; 		- get_lower_nibble
; 	- square
; 		- mult_soft
; 	- write_led
; 
                    CALL      clr_data_mem
forever: 
                    CALL      read_switch
                    CALL      square
                    CALL      write_led
                    JUMP      forever

; ===============================================================

; routine: clr_data_mem
; function: clear data ram
; temp registrer: data, i

; ===============================================================

clr_data_mem: 
                    LOAD      i, 63               ; initialize loop index to 64
                    LOAD      data, 0

clr_mem_loop: 
                    STORE     data, i
                    SUB       i, 1                ; dec loop index
                    JUMP      NZ, clr_mem_loop    ; repeat until i=0
                    RET       

; ===============================================================

; routine: read switch
; function: obtain two nibbles from input
; input register: sw_in
; temp register: data

; ===============================================================

read_switch: 
                    IN        sw_in, sw_port      ; read switch input
                    LOAD      data, sw_in
                    CALL      get_lower_nibble
                    STORE     data, a_lsb         ; store a to data ram
                    LOAD      data, sw_in
                    CALL      get_upper_nibble
                    STORE     data, b_lsb         ; store b to data ram
                    RET       
; ================================================================
; routine: get_lower_nibble
; function: get lower 4 bits of data
; input register: data
; output register: data
; ================================================================

get_lower_nibble: 
                    AND       data, UP_NIBBLE_MASK; clear upper nibble
                    RET       

; ================================================================
; routine: get_upper_nibble
; function: get upper 4 bits of data
; input register: data
; output register: data
; ================================================================

get_upper_nibble: 
                    SR0       data                ; right shift 4 times
                    SR0       data
                    SR0       data
                    SR0       data
                    RET       

; ================================================================
; routine: write_led
; function: output 8 LSBs of result to 8 leds
; temp register: data
; ================================================================

write_led: 
                    FETCH     data, aabb_lsb
                    OUT       data, led_port
                    RET       
; ================================================================
; routine: square
; function: calculate a*a + b*b
; 	data/result stored in ram started w/ SQ_BASE_ADDR
; temp register: s3,s4,s5,s6,data
; ================================================================
square: 

; calculate a*a

                    FETCH     s3, a_lsb           ; load a
                    FETCH     s4, a_lsb           ; load a
                    CALL      mult_soft           ; calculate a*a
                    STORE     s6, aa_lsb          ; store lower byte of a*a
                    STORE     s5, aa_msb          ; store upper byte of a*a

; calculate b*b

                    FETCH     s3, b_lsb           ; load b
                    FETCH     s4, b_lsb           ; load b
                    CALL      mult_soft           ; calculate b*b
                    STORE     s6, bb_lsb          ; store lower byte of b*b
                    STORE     s5, bb_msb          ; store upper byte of b*b

; calculate a*a+b*b

                    FETCH     data, aa_lsb        ; get lower byte of a*a
                    ADD       data, s6            ; add lower byte of a*a+b*b
                    STORE     data, aabb_lsb      ; store lower byte of a*a+b*b
                    FETCH     data, aa_msb        ; get upper byte of a*a
                    ADDC      data, s5            ; add upper byte of a*a+b*b
                    STORE     data, aabb_msb      ; store upper byte of a*a+b*b
                    LOAD      data, 0             ; clear data, but keep carry
                    ADDC      data, 0             ; get carry-out from previous
                    STORE     data, aabb_cout     ; store carry-out of a*a+b*b
                    RET       

; =================================================================
; routine: mult_soft
; function: 8-bit unsigned multiplier using
; 	       shift-and-add algorithm
; input register:
; 	s3: multiplicand
; 	s4: multiplier
; output register:
; 	s5: upper byte of product
; 	s6: lower byte of product
; temp register: i
; =================================================================

mult_soft: 

                    LOAD      s5, 0               ; clear s5
                    LOAD      i, 8                ; initialize loop index

mult_loop: 

                    SR0       s4                  ; shift lsb to carry
                    JUMP      NC, shift_prod      ; lsb is 0
                    ADD       s5, s3              ; lsb is 1

shift_prod: 

                    SRA       s5                  ; shift upper byte right
; carry to MSB, LSB to carry
                    SRA       s6                  ; shift lower byte right
; lsb of s5 to MSB of s6
                    SUB       i, 1                ; dec loop index
                    JUMP      NZ, mult_loop       ; repeat until i=0
                    RET       



